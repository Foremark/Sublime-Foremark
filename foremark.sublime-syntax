%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html

name: Foremark
file_extensions: .mf.xhtml

scope: text.foremark

variables:
  # This is the full XML Name production, but should not be used where namespaces
  # are possible. Those locations should use a qualified_name.
  name: '[[:alpha:]:_][[:alnum:]:_.-]*'
  # This is the form that allows a namespace prefix (ns:) followed by a local
  # name. The captures are:
  #  1: namespace prefix name
  #  2: namespace prefix colon
  #  3: local tag name
  qualified_name: '(?:([[:alpha:]_][[:alnum:]_.-]*)(:))?([[:alpha:]_][[:alnum:]_.-]*)'

contexts:
  # XML context (based on Sublime Text 3's standard plugin)
  # ============================================================================

  main:
    - match: '(<\?)(xml)(?=\s)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
      push:
        - meta_scope: meta.tag.preprocessor.xml
        - match: \?>
          scope: punctuation.definition.tag.end.xml
          pop: true
        - match: '\s+{{qualified_name}}(=)?'
          captures:
            1: entity.other.attribute-name.namespace.xml
            2: entity.other.attribute-name.xml punctuation.separator.namespace.xml
            3: entity.other.attribute-name.localname.xml
            4: punctuation.separator.key-value.xml
        - include: double-quoted-string
        - include: single-quoted-string
    - match: '(<!)(DOCTYPE)(?:\s+({{name}}))?'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.doctype.xml
        3: variable.documentroot.xml
      push:
        - meta_scope: meta.tag.sgml.doctype.xml
        - match: \s*(>)
          captures:
            1: punctuation.definition.tag.end.xml
          pop: true
        - include: internal-subset
    - include: comment

    - match: (<)(style)\b
      captures:
        0: meta.tag.style.begin.html
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.style.html
      push: style-css
    - match: '(<)(script)\b'
      captures:
        0: meta.tag.script.begin.html
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.script.html
      push: script-javascript
    - match: '(<)(mf-text|pre)\b'
      captures:
        0: meta.tag.mf-text.begin.html
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.mf-text.html
      push: mftext-start

    - match: '(</?){{qualified_name}}([^/>\s]*)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.namespace.xml
        3: entity.name.tag.xml punctuation.separator.namespace.xml
        4: entity.name.tag.localname.xml
        5: invalid.illegal.bad-tag-name.xml
      push:
        - meta_scope: meta.tag.xml
        - match: /?>
          scope: punctuation.definition.tag.end.xml
          pop: true
        - include: tag-stuff
    - match: '(</?)([[:digit:].-][[:alnum:]:_.-]*)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: invalid.illegal.bad-tag-name.xml
      push:
        - meta_scope: meta.tag.xml
        - match: /?>
          scope: punctuation.definition.tag.end.xml
          pop: true
        - include: tag-stuff
    - match: '(<\?)(xml-stylesheet|xml-model)(?=\s|\?>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
      push:
        - meta_scope: meta.tag.preprocessor.xml
        - match: \?>
          scope: punctuation.definition.tag.end.xml
          pop: true
        - include: tag-stuff
    - match: '(<\?)((?![xX][mM][lL]){{qualified_name}})(?=\s|\?>)'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.xml
      push:
        - meta_scope: meta.tag.preprocessor.xml
        - match: \?>
          scope: punctuation.definition.tag.end.xml
          pop: true
    - include: entity
    - match: '<!\[CDATA\['
      scope: punctuation.definition.string.begin.xml
      push:
        - meta_scope: string.unquoted.cdata.xml
        - match: ']]>'
          scope: punctuation.definition.string.end.xml
          pop: true
    - match: ']]>'
      scope: invalid.illegal.missing-entity.xml
    - include: should-be-entity

  should-be-entity:
    - match: '&'
      scope: invalid.illegal.bad-ampersand.xml
    - match: '<'
      scope: invalid.illegal.missing-entity.xml

  double-quoted-string:
    - match: '"'
      scope: punctuation.definition.string.begin.xml
      push:
        - meta_scope: string.quoted.double.xml
        - match: '"'
          scope: punctuation.definition.string.end.xml
          pop: true
        - include: entity
        - include: should-be-entity

  entity:
    - match: '(&)(?:{{name}}|#[0-9]+|#x\h+)(;)'
      scope: constant.character.entity.xml
      captures:
        1: punctuation.definition.constant.xml
        2: punctuation.definition.constant.xml

  comment:
    - match: '<!--'
      scope: punctuation.definition.comment.begin.xml
      push:
        - meta_scope: comment.block.xml
        - match: '-->'
          scope: punctuation.definition.comment.end.xml
          pop: true
        - match: '-{2,}'
          scope: invalid.illegal.double-hyphen-within-comment.xml

  internal-subset:
    - match: \[
      scope: punctuation.definition.constant.xml
      push:
        - meta_scope: meta.internalsubset.xml
        - match: \]
          pop: true
        - include: comment
        - include: entity-decl
        - include: element-decl
        - include: attlist-decl
        - include: notation-decl
        - include: parameter-entity

  entity-decl:
    - match: '(<!)(ENTITY)\s+(%\s+)?({{name}})(\s+(?:SYSTEM|PUBLIC)\s+)?'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.entity.xml
        3: punctuation.definition.entity.xml
        4: variable.entity.xml
        5: keyword.entitytype.xml
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.xml
          pop: true
        - include: double-quoted-string
        - include: single-quoted-string

  element-decl:
    - match: '(<!)(ELEMENT)\s+({{name}})\s+'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.element.xml
        3: variable.element.xml
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.xml
          pop: true
        - match: '\b(EMPTY|ANY)\b'
          scope: constant.other.xml
        - include: element-parens

  element-parens:
    - match: \(
      scope: punctuation.definition.group.xml
      push:
        - match: (\))([*?+])?
          captures:
            1: punctuation.definition.group.xml
            2: keyword.operator.xml
          pop: true
        - match: '#PCDATA'
          scope: constant.other.xml
        - match: '[*?+]'
          scope: keyword.operator.xml
        - match: '[,|]'
          scope: punctuation.separator.xml
        - include: element-parens

  attlist-decl:
    - match: '(<!)(ATTLIST)\s+({{name}})\s+({{name}})'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.attlist.xml
        3: variable.element.xml
        4: variable.attribute-name.xml
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.xml
          pop: true
        - include: double-quoted-string
        - include: single-quoted-string

  notation-decl:
    - match: '(<!)(NOTATION)\s+({{name}})'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.notation.xml
        3: variable.notation.xml
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.xml
          pop: true
        - include: double-quoted-string
        - include: single-quoted-string

  parameter-entity:
    - match: '(%){{name}}(;)'
      scope: constant.character.parameter-entity.xml
      captures:
        1: punctuation.definition.constant.xml
        2: punctuation.definition.constant.xml

  single-quoted-string:
    - match: "'"
      scope: punctuation.definition.string.begin.xml
      push:
        - meta_scope: string.quoted.single.xml
        - match: "'"
          scope: punctuation.definition.string.end.xml
          pop: true
        - include: entity
        - include: should-be-entity

  tag-stuff:
    - match: '(?:\s+|^){{qualified_name}}\s*(=)'
      captures:
        1: entity.other.attribute-name.namespace.xml
        2: entity.other.attribute-name.xml punctuation.separator.namespace.xml
        3: entity.other.attribute-name.localname.xml
        4: punctuation.separator.key-value.xml
    - match: '(?:\s+|^)([[:alnum:]:_.-]+)\s*(=)'
      captures:
        1: invalid.illegal.bad-attribute-name.xml
        2: punctuation.separator.key-value.xml
    - include: double-quoted-string
    - include: single-quoted-string

  # XHTML elements
  # ============================================================================
  #
  # Elements and CDATA inside elements aren't handled properly yet. It should
  # work in most cases, though.

  style-css:
    - meta_content_scope: meta.tag.style.begin.html
    - include: tag-stuff
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      set:
        - include: style-close-tag
        - match: (?=\S)
          embed: scope:source.css
          embed_scope: source.css.embedded.html
          escape: (?=(?:-->\s*)?</style)

  style-close-tag:
    - match: (</)(style)(>)
      scope: meta.tag.style.end.html
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.style.html
        3: punctuation.definition.tag.end.xml
      pop: true

  script-javascript:
    - meta_content_scope: meta.tag.script.begin.html
    - include: tag-stuff
    - match: '/>'
      scope: punctuation.definition.tag.end.xml
      pop: true
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      set:
        - include: script-close-tag
        - match: (?=\S)
          embed: scope:source.js
          embed_scope: source.js.embedded.html
          escape: (?=(?:-->\s*)?</script)

  script-close-tag:
    - match: <!--
      scope: comment.block.html punctuation.definition.comment.begin.html
    - match: (</)(script)(>)
      scope: meta.tag.script.end.html
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.script.html
        3: punctuation.definition.tag.end.xml
      pop: true

  # Foremark Text
  # ============================================================================
  #
  # Assumes that `mf-text` isn't nested.

  mftext-start:
    - meta_content_scope: meta.tag.style.begin.html
    - include: tag-stuff
    - match: '>'
      scope: punctuation.definition.tag.end.xml
      set: mftext-text

  mftext-text:
    - match: '<!\[CDATA\['
      scope: punctuation.definition.string.begin.xml
      push:
        - match: \]\]>
          scope: punctuation.definition.string.end.xml
          pop: true
        - match: (?=.)
          embed: mftext-common
          escape: (?=\]\]>)
    - match: (</)(mf-text|pre)(>)
      scope: meta.tag.style.end.html
      captures:
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.style.html
        3: punctuation.definition.tag.end.xml
      pop: true

    - match: (?=.)
      embed: mftext-common
      escape: (?=<!\[CDATA\[)

  mftext-common:
    - meta_content_scope: text.foremarktext

    - match: ^\s+(\*\*)(.*)(\*\*)$
      captures:
        1: punctuation.definition.bold.markdown
        2: markup.bold.markdown
        3: punctuation.definition.bold.markdown

    - match: |-
        (?x)^
        (?= [ ]{,3}>.
        | ([ ]{4}|\t)(?!$)
        | [#]{1,6}\s*+
        | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
        )
      comment: |
        We could also use an empty end match and set
        applyEndPatternLast, but then we must be sure that the begin
        pattern will only match stuff matched by the sub-patterns.
      push:
        - meta_scope: meta.block-level.markdown
        - match: |-
            (?x)^
            (?! [ ]{,3}>.
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          pop: true
        - include: blocks
        - include: heading
        - include: separator

    - include: blocks

    - match: '^[ ]{0,3}([*+-])(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown
      push:
        - meta_scope: markup.list.unnumbered.markdown
        - match: ^(?=\S)
          captures:
            1: punctuation.definition.list_item.markdown
          pop: true
        - include: list-paragraph
    - match: '^[ ]{0,3}[0-9]+(\.)(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown
      push:
        - meta_scope: markup.list.numbered.markdown
        - match: ^(?=\S)
          captures:
            1: punctuation.definition.list_item.markdown
          pop: true
        - include: list-paragraph
    - match: '^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b)(?!.*?</\1>)'
      comment: Markdown formatting is disabled inside block-level tags.
      push:
        - meta_scope: meta.disable-markdown
        - match: (?<=</\1>$\n)
          pop: true
        - include: scope:text.html.basic
    - match: '^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b)'
      comment: Same rule but for one line disables.
      push:
        - meta_scope: meta.disable-markdown
        - match: $\n?
          pop: true
        - include: scope:text.html.basic
    - match: |-
        (?x:
          \s*           # Leading whitespace
          (\[)(.+?)(\])(:)    # Reference name
          [ \t]*          # Optional whitespace
          (<?)(\S+?)(>?)      # The url
          [ \t]*          # Optional whitespace
          (?:
              ((\().+?(\)))   # Match title in quotes…
            | ((").+?("))   # or in parens.
          )?            # Title is optional
          \s*           # Optional whitespace
          $
        )
      scope: meta.link.reference.def.markdown
      captures:
        1: punctuation.definition.constant.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.markdown
        4: punctuation.separator.key-value.markdown
        5: punctuation.definition.link.markdown
        6: markup.underline.link.markdown
        7: punctuation.definition.link.markdown
        8: string.other.link.description.title.markdown
        9: punctuation.definition.string.begin.markdown
        10: punctuation.definition.string.end.markdown
        11: string.other.link.description.title.markdown
        12: punctuation.definition.string.begin.markdown
        13: punctuation.definition.string.end.markdown
    - match: '^(?=\S)(?![=-]{3,}(?=$))'
      push:
        - meta_scope: meta.paragraph.markdown
        - match: '^(?:\s*$|(?=[ ]{,3}>.))|(?=[ \t]*\n)(?<=^===|^====|=====|^---|^----|-----)[ \t]*\n|(?=^#)'
          pop: true
        - include: inline
        - include: scope:text.html.basic
        - match: '^(={3,})(?=[ \t]*$)'
          scope: markup.heading.1.markdown
          captures:
            1: punctuation.definition.heading.markdown
        - match: '^(-{3,})(?=[ \t]*$)'
          scope: markup.heading.2.markdown
          captures:
            1: punctuation.definition.heading.markdown

  blocks:
    - include: block_quote
    - include: block_raw
    - include: block_latex
    - include: block_diagram
    - include: footnotes
    - include: foremark_footer

  ampersand:
    - match: "&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)"
      comment: |
        Markdown will convert this for us. We match it so that the
                        HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-ampersand.markdown
  block_quote:
    - match: '\G[ ]{,3}(>)(?!$)[ ]?'
      comment: |
        We terminate the block quote when seeing an empty line, a
        separator or a line with leading > characters. The latter is
        to “reset” the quote level for quoted lines.
      captures:
        1: punctuation.definition.blockquote.markdown
      push:
        - meta_scope: markup.quote.markdown
        - match: |-
            (?x)^
            (?= \s*$
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            | [ ]{,3}>.
            )
          pop: true
        - match: |-
            (?x)\G
            (?= [ ]{,3}>.
            )
          push:
            - match: ^
              pop: true
            - include: block_quote
        - match: |-
            (?x)\G
            (?= ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - include: block_raw
            - include: heading
            - include: separator
            - match: ^
              pop: true
        - match: |-
            (?x)\G
            (?! $
            | [ ]{,3}>.
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - match: $|(?<=\n)
              pop: true
            - include: inline

  # Code fence: `~~~~~~~~~~~~~~~~~~~~~~~ Language`
  block_raw:
    - match: '^\s*(?=~{3,}|`{3,})\s*'
      set: block_raw_lang_first

  block_raw_lang_first:
    - include: block_raw_lang_common

    # Language name is missing - Start a code fence block anyway
    - match: $
      set:
        - meta_content_scope: markup.raw.block.foremark
        - match: '(~{3,}|`{3,})'
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang

    - match: '(~{3,}|`{3,})'
      scope: punctuation.definition.raw.foremark

  block_raw_lang:
    - include: block_raw_lang_common

    # Language name is missing - End the code fence block
    - match: $
      scope: hoegegergesr
      pop: true

    - match: '(~{3,}|`{3,})'
      scope: punctuation.definition.raw.foremark

  block_raw_lang_common:
    - match: (?i:py(thon)?).*\s*$
      scope: storage.type.language.foremark
      set:
        - meta_content_scope: markup.raw.block.foremark source.python
        - match: (?=(~{3,}|`{3,}))
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang
        - match: (?=\S)
          embed: scope:source.python
          escape: (?=(~{3,}|`{3,}))

    - match: (?i:javascript|js).*\s*$
      scope: storage.type.language.foremark
      set:
        - meta_content_scope: markup.raw.block.foremark source.js
        - match: (?=(~{3,}|`{3,}))
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang
        - match: (?=\S)
          embed: scope:source.js
          escape: (?=(~{3,}|`{3,}))

    - match: (?i:Scala).*\s*$
      scope: storage.type.language.foremark
      set:
        - meta_content_scope: markup.raw.block.foremark source.scala
        - match: (?=(~{3,}|`{3,}))
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang
        - match: (?=\S)
          embed: scope:source.scala
          escape: (?=(~{3,}|`{3,}))

    - match: (?i:cs(harp)?).*\s*$
      scope: storage.type.language.foremark
      set:
        - meta_content_scope: markup.raw.block.foremark source.cs
        - match: (?=(~{3,}|`{3,}))
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang
        - match: (?=\S)
          embed: scope:source.cs
          escape: (?=(~{3,}|`{3,}))

    - match: (?i:java).*\s*$
      scope: storage.type.language.foremark
      set:
        - meta_content_scope: markup.raw.block.foremark source.java
        - match: (?=(~{3,}|`{3,}))
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang
        - match: (?=\S)
          embed: scope:source.java
          escape: (?=(~{3,}|`{3,}))

    - match: (?i:rust).*\s*$
      scope: storage.type.language.foremark
      set:
        - meta_content_scope: markup.raw.block.foremark source.rust
        - match: (?=(~{3,}|`{3,}))
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang
        - match: (?=\S)
          embed: scope:source.rust
          escape: (?=(~{3,}|`{3,}))

    - match: (?i:bash|sh|zsh).*\s*$
      scope: storage.type.language.foremark
      set:
        - meta_content_scope: markup.raw.block.foremark
        - include: "scope:source.shell"
      with_prototype:
        - match: '(?=(~{3,}|`{3,}))'
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang

    - match: (?i:xml).*\s*$
      scope: storage.type.language.foremark
      set:
        - meta_content_scope: markup.raw.block.foremark source.xml
        - match: (?=(~{3,}|`{3,}))
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang
        - match: (?=\S)
          embed: scope:text.xml
          escape: (?=(~{3,}|`{3,}))

    # Unknown language
    - match: '[^~` \n].*\s*$'
      scope: storage.type.language.foremark
      set:
        - meta_content_scope: markup.raw.block.foremark
        - match: '(?=(~{3,}|`{3,}))'
          scope: punctuation.definition.raw.foremark
          set: block_raw_lang

  bold:
    - match: |-
        (?x)
          (\*\*|__)(?=\S)               # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | (?!(?<=\S)\1).            # Everything besides
                                # style closer
            )++
            (?<=\S)\1               # Close
          )
      captures:
        1: punctuation.definition.bold.markdown
      push:
        - meta_scope: markup.bold.markdown
        - match: (?<=\S)(\1)
          captures:
            1: punctuation.definition.bold.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: italic
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref-literal
        - include: link-ref
  bracket:
    - match: '<(?![a-z/?\$!])'
      comment: |
        Markdown will convert this for us. We match it so that the
                        HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-bracket.markdown
  escape:
    - match: '\\[-`*_#+.!(){}\[\]\\>]'
      scope: constant.character.escape.markdown
  heading:
    - match: '\G(#{1,6})(?!#)\s+(?=\S)'
      captures:
        1: punctuation.definition.heading.markdown
      push:
        - meta_scope: markup.heading.markdown entity.name.type.markdown
        # - meta_content_scope:
        - match: (?=\s*(#*)$\n?)
          pop: true
        - include: inline
        - match: $
          pop: true
  image-inline:
    - match: |-
        (?x:
                (\!)            # Images start with !
                (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                                # Match the link text.
                ([ ])?          # Space not allowed
                (\()            # Opening paren for url
                  (<?)(\S+?)(>?)      # The url
                  [ \t]*        # Optional whitespace
                  (?:
                      ((\().+?(\)))   # Match title in parens…
                    | ((").+?("))   # or in quotes.
                  )?            # Title is optional
                  \s*           # Optional whitespace
                (\))
               )
      scope: meta.image.inline.markdown
      captures:
        1: keyword.operator
        2: punctuation.definition.link.begin.markdown
        # 3: string.other.link.description.markdown
        5: punctuation.definition.link.end.markdown
        6: invalid.illegal.whitespace.markdown
        7: punctuation.definition.metadata.markdown
        8: punctuation.definition.link.markdown
        9: markup.underline.link.image.markdown string.other.url
        10: punctuation.definition.link.markdown
        # 11: string.other.link.description.title.markdown
        # 12: punctuation.definition.link.markdown
        # 13: punctuation.definition.link.markdown
        # 14: string.other.link.description.title.markdown
        # 15: punctuation.definition.link.markdown
        16: punctuation.definition.link.markdown
        17: punctuation.definition.metadata.markdown


  image-ref:
    - match: '\!(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(.*?)(\])'
      scope: meta.image.reference.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.description.markdown
        4: punctuation.definition.string.begin.markdown
        5: punctuation.definition.constant.markdown
        6: constant.other.reference.link.markdown
        7: punctuation.definition.constant.markdown
  inline:
    - include: escape
    - include: ampersand
    - include: bracket
    - include: raw
    - include: bold
    - include: italic
    - include: line-break
    - include: image-inline
    - include: link-inline
    - include: link-inet
    - include: link-email
    - include: image-ref
    - include: link-ref-literal
    - include: link-ref
    - include: inline_latex
    - include: block_raw

  italic:
    - match: |-
        (?x)
          (\*|_)(?=\S)                # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | \1\1                # Must be bold closer
              | (?!(?<=\S)\1).            # Everything besides
                                # style closer
            )++
            (?<=\S)\1               # Close
          )
      captures:
        1: punctuation.definition.italic.markdown
      push:
        - meta_scope: markup.italic.markdown
        - match: (?<=\S)(\1)((?!\1)|(?=\1\1))
          captures:
            1: punctuation.definition.italic.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: bold
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref-literal
        - include: link-ref
  line-break:
    - match: " {2,}$"
      scope: meta.dummy.line-break
  link-email:
    - match: '(<)((?:mailto:)?[-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(>)'
      scope: meta.link.email.lt-gt.markdown
      captures:
        1: punctuation.definition.link.markdown
        2: markup.underline.link.markdown
        4: punctuation.definition.link.markdown
  link-inet:
    - match: (<)((?:https?|ftp)://.*?)(>)
      scope: meta.link.inet.markdown
      captures:
        1: punctuation.definition.link.markdown
        2: markup.underline.link.markdown
        3: punctuation.definition.link.markdown

  link-inline:
    - match: '(?m:section) (\[)([^\]]*)(\])'
      captures:
        1: punctuation.definition.tag.begin
        2: entity.name.tag
        3: punctuation.definition.tag.end

    - match: '(\[)(\^[a-zA-Z_]+)(\])'
      captures:
        1: punctuation.definition.tag.begin
        2: entity.name.tag
        3: punctuation.definition.tag.end

    - match: (<)(https?://(?:[^>\s]*))(>)
      captures:
        1: punctuation.definition.link.markdown
        2: markup.underline.link.markdown string.url.markdown
        3: punctuation.definition.link.markdown

    - match: |-
        (?x:
                (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                              # Match the link text.
                ([ ])?            # Space not allowed
                (\()            # Opening paren for url
                  (<?)(.*?)(>?)     # The url
                  [ \t]*          # Optional whitespace
                  (?:
                      ((\().+?(\)))   # Match title in parens…
                    | ((").+?("))   # or in quotes.
                  )?            # Title is optional
                  \s*           # Optional whitespace
                (\))
               )
      scope: meta.link.inline.markdown
      captures:
        1: punctuation.definition.title.begin.markdown
        # 2: string.other.link.title.markdown
        4: punctuation.definition.title.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
        7: punctuation.definition.link.markdown
        8: markup.underline.link.markdown string.url.markdown
        9: punctuation.definition.link.markdown
        10: string.other.link.description.title.markdown
        11: punctuation.definition.string.begin.markdown
        12: punctuation.definition.string.end.markdown
        13: string.other.link.description.title.markdown
        14: punctuation.definition.string.begin.markdown
        15: punctuation.definition.string.end.markdown
        16: punctuation.definition.metadata.markdown
  link-ref:
    - match: '(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)([^\]]*+)(\])'
      scope: meta.link.reference.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        # 2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: constant.other.reference.link.markdown
        7: punctuation.definition.constant.end.markdown
  link-ref-literal:
    - match: '(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(\])'
      scope: meta.link.reference.literal.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        # 2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: punctuation.definition.constant.end.markdown
  list-paragraph:
    - match: \G\s+(?=\S)
      push:
        - meta_scope: meta.paragraph.list.markdown
        - match: ^\s*$
          pop: true
        - match: ^\s*(?=\*)
          pop: true
        - include: inline
  raw:
    - match: '(`+)([^`]|(?!(?<!`)\1(?!`))`)*+(\1)'
      scope: markup.raw.inline.markdown
      captures:
        1: punctuation.definition.raw.markdown
        3: punctuation.definition.raw.markdown
  separator:
    - match: '\G[ ]{,3}([-*_])([ ]{,2}\1){2,}[ \t]*$\n?'
      scope: meta.separator.markdown

  inline_latex:
    - match: \$
      scope: punctuation.section.begin
      push:
        - meta_content_scope: markup.raw.math.foremark
        - include: latex_in
      with_prototype:
        - match: \$
          scope: punctuation.section.end
          pop: true
        - match: $
          pop: true

  block_latex:
    - match: \$\$(\s*$)?
      scope: punctuation.section.begin
      push:
        - meta_content_scope: markup.raw.block.math.foremark
        - include: latex_in
      with_prototype:
        - match: \$\$
          scope: punctuation.section.end
          pop: true

    - match: \\begin{equation}
      scope: punctuation.section.begin
      push: latex_in
      with_prototype:
        - match: \\end{equation}
          scope: punctuation.section.end
          pop: true

  latex_in:
    - match: (\\[a-zA-Z]+|_|\^)\s*(\{)
      captures:
        1: variable.function
        2: punctuation.definition.arguments.begin
      push:
        - match: (\})\s*(\{)
          captures:
            1: punctuation.definition.arguments.end
            2: punctuation.definition.arguments.begin
        - match: (\})
          scope: punctuation.definition.arguments.end
          pop: true
        - include: latex_in
        - match: (?>\$)
          pop: true
    - match: \{
      scope: punctuation.definition.begin
      push:
        - match: \}
          scope: punctuation.definition.end
          pop: true

    - match: '(\\(big|Big|bigg|Bigg))\s*([()\[\]]|\\{|\\}|lanle|rangle)'
      scope: constant.language

    - match: \\[a-zA-Z]+
      scope: constant.other

    - match: '(~)'
      scope: punctuation.separator

    - match: (&|_|\^)
      scope: constant.language

    - match: '(=|\+|-|\*)'
      scope: keyword.operator

  block_diagram:
    - match: ^\s*(:::)
      captures:
        1: punctuation.block.diagram.begin
      push:
        - meta_scope: markup.raw.block.diagram

        - match: ^\s*(:::)
          captures:
            1: punctuation.block.diagram.begin

        - match: ^(?!\s*(:::))
          pop: true

  footnotes:
    - match: '^\s*(\[)(\^[a-zA-Z_]+)(\])(:)'
      captures:
        1: punctuation.definition.tag.begin
        2: entity.name.function
        3: punctuation.definition.tag.end
      push:
        - match: $|(?<=\n)
          pop: true
        - include: inline
